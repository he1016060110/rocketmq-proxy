// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proxy.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proxy_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proxy_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proxy_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proxy_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proxy_2eproto;
namespace proxy {
class ConsumeAckReply;
class ConsumeAckReplyDefaultTypeInternal;
extern ConsumeAckReplyDefaultTypeInternal _ConsumeAckReply_default_instance_;
class ConsumeAckRequest;
class ConsumeAckRequestDefaultTypeInternal;
extern ConsumeAckRequestDefaultTypeInternal _ConsumeAckRequest_default_instance_;
class ConsumeReply;
class ConsumeReplyDefaultTypeInternal;
extern ConsumeReplyDefaultTypeInternal _ConsumeReply_default_instance_;
class ConsumeRequest;
class ConsumeRequestDefaultTypeInternal;
extern ConsumeRequestDefaultTypeInternal _ConsumeRequest_default_instance_;
class ProduceReply;
class ProduceReplyDefaultTypeInternal;
extern ProduceReplyDefaultTypeInternal _ProduceReply_default_instance_;
class ProduceRequest;
class ProduceRequestDefaultTypeInternal;
extern ProduceRequestDefaultTypeInternal _ProduceRequest_default_instance_;
}  // namespace proxy
PROTOBUF_NAMESPACE_OPEN
template<> ::proxy::ConsumeAckReply* Arena::CreateMaybeMessage<::proxy::ConsumeAckReply>(Arena*);
template<> ::proxy::ConsumeAckRequest* Arena::CreateMaybeMessage<::proxy::ConsumeAckRequest>(Arena*);
template<> ::proxy::ConsumeReply* Arena::CreateMaybeMessage<::proxy::ConsumeReply>(Arena*);
template<> ::proxy::ConsumeRequest* Arena::CreateMaybeMessage<::proxy::ConsumeRequest>(Arena*);
template<> ::proxy::ProduceReply* Arena::CreateMaybeMessage<::proxy::ProduceReply>(Arena*);
template<> ::proxy::ProduceRequest* Arena::CreateMaybeMessage<::proxy::ProduceRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proxy {

// ===================================================================

class ProduceRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proxy.ProduceRequest) */ {
 public:
  ProduceRequest();
  virtual ~ProduceRequest();

  ProduceRequest(const ProduceRequest& from);
  ProduceRequest(ProduceRequest&& from) noexcept
    : ProduceRequest() {
    *this = ::std::move(from);
  }

  inline ProduceRequest& operator=(const ProduceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProduceRequest& operator=(ProduceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProduceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProduceRequest* internal_default_instance() {
    return reinterpret_cast<const ProduceRequest*>(
               &_ProduceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ProduceRequest* other);
  friend void swap(ProduceRequest& a, ProduceRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProduceRequest* New() const final {
    return CreateMaybeMessage<ProduceRequest>(nullptr);
  }

  ProduceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProduceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProduceRequest& from);
  void MergeFrom(const ProduceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProduceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proxy.ProduceRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proxy_2eproto);
    return ::descriptor_table_proxy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string topic = 1;
  void clear_topic();
  static const int kTopicFieldNumber = 1;
  const std::string& topic() const;
  void set_topic(const std::string& value);
  void set_topic(std::string&& value);
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  std::string* mutable_topic();
  std::string* release_topic();
  void set_allocated_topic(std::string* topic);

  // string group = 2;
  void clear_group();
  static const int kGroupFieldNumber = 2;
  const std::string& group() const;
  void set_group(const std::string& value);
  void set_group(std::string&& value);
  void set_group(const char* value);
  void set_group(const char* value, size_t size);
  std::string* mutable_group();
  std::string* release_group();
  void set_allocated_group(std::string* group);

  // string tag = 3;
  void clear_tag();
  static const int kTagFieldNumber = 3;
  const std::string& tag() const;
  void set_tag(const std::string& value);
  void set_tag(std::string&& value);
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);

  // string body = 4;
  void clear_body();
  static const int kBodyFieldNumber = 4;
  const std::string& body() const;
  void set_body(const std::string& value);
  void set_body(std::string&& value);
  void set_body(const char* value);
  void set_body(const char* value, size_t size);
  std::string* mutable_body();
  std::string* release_body();
  void set_allocated_body(std::string* body);

  // int32 delayLevel = 5;
  void clear_delaylevel();
  static const int kDelayLevelFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 delaylevel() const;
  void set_delaylevel(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:proxy.ProduceRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
  ::PROTOBUF_NAMESPACE_ID::int32 delaylevel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class ProduceReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proxy.ProduceReply) */ {
 public:
  ProduceReply();
  virtual ~ProduceReply();

  ProduceReply(const ProduceReply& from);
  ProduceReply(ProduceReply&& from) noexcept
    : ProduceReply() {
    *this = ::std::move(from);
  }

  inline ProduceReply& operator=(const ProduceReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProduceReply& operator=(ProduceReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProduceReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProduceReply* internal_default_instance() {
    return reinterpret_cast<const ProduceReply*>(
               &_ProduceReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ProduceReply* other);
  friend void swap(ProduceReply& a, ProduceReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProduceReply* New() const final {
    return CreateMaybeMessage<ProduceReply>(nullptr);
  }

  ProduceReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProduceReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProduceReply& from);
  void MergeFrom(const ProduceReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProduceReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proxy.ProduceReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proxy_2eproto);
    return ::descriptor_table_proxy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg_id = 2;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 2;
  const std::string& msg_id() const;
  void set_msg_id(const std::string& value);
  void set_msg_id(std::string&& value);
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  std::string* mutable_msg_id();
  std::string* release_msg_id();
  void set_allocated_msg_id(std::string* msg_id);

  // string err_msg = 3;
  void clear_err_msg();
  static const int kErrMsgFieldNumber = 3;
  const std::string& err_msg() const;
  void set_err_msg(const std::string& value);
  void set_err_msg(std::string&& value);
  void set_err_msg(const char* value);
  void set_err_msg(const char* value, size_t size);
  std::string* mutable_err_msg();
  std::string* release_err_msg();
  void set_allocated_err_msg(std::string* err_msg);

  // int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:proxy.ProduceReply)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class ConsumeRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proxy.ConsumeRequest) */ {
 public:
  ConsumeRequest();
  virtual ~ConsumeRequest();

  ConsumeRequest(const ConsumeRequest& from);
  ConsumeRequest(ConsumeRequest&& from) noexcept
    : ConsumeRequest() {
    *this = ::std::move(from);
  }

  inline ConsumeRequest& operator=(const ConsumeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsumeRequest& operator=(ConsumeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsumeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsumeRequest* internal_default_instance() {
    return reinterpret_cast<const ConsumeRequest*>(
               &_ConsumeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ConsumeRequest* other);
  friend void swap(ConsumeRequest& a, ConsumeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsumeRequest* New() const final {
    return CreateMaybeMessage<ConsumeRequest>(nullptr);
  }

  ConsumeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsumeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsumeRequest& from);
  void MergeFrom(const ConsumeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsumeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proxy.ConsumeRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proxy_2eproto);
    return ::descriptor_table_proxy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string topic = 1;
  void clear_topic();
  static const int kTopicFieldNumber = 1;
  const std::string& topic() const;
  void set_topic(const std::string& value);
  void set_topic(std::string&& value);
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  std::string* mutable_topic();
  std::string* release_topic();
  void set_allocated_topic(std::string* topic);

  // string consumer_group = 2;
  void clear_consumer_group();
  static const int kConsumerGroupFieldNumber = 2;
  const std::string& consumer_group() const;
  void set_consumer_group(const std::string& value);
  void set_consumer_group(std::string&& value);
  void set_consumer_group(const char* value);
  void set_consumer_group(const char* value, size_t size);
  std::string* mutable_consumer_group();
  std::string* release_consumer_group();
  void set_allocated_consumer_group(std::string* consumer_group);

  // @@protoc_insertion_point(class_scope:proxy.ConsumeRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr consumer_group_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class ConsumeReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proxy.ConsumeReply) */ {
 public:
  ConsumeReply();
  virtual ~ConsumeReply();

  ConsumeReply(const ConsumeReply& from);
  ConsumeReply(ConsumeReply&& from) noexcept
    : ConsumeReply() {
    *this = ::std::move(from);
  }

  inline ConsumeReply& operator=(const ConsumeReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsumeReply& operator=(ConsumeReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsumeReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsumeReply* internal_default_instance() {
    return reinterpret_cast<const ConsumeReply*>(
               &_ConsumeReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ConsumeReply* other);
  friend void swap(ConsumeReply& a, ConsumeReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsumeReply* New() const final {
    return CreateMaybeMessage<ConsumeReply>(nullptr);
  }

  ConsumeReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsumeReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsumeReply& from);
  void MergeFrom(const ConsumeReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsumeReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proxy.ConsumeReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proxy_2eproto);
    return ::descriptor_table_proxy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg_id = 2;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 2;
  const std::string& msg_id() const;
  void set_msg_id(const std::string& value);
  void set_msg_id(std::string&& value);
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  std::string* mutable_msg_id();
  std::string* release_msg_id();
  void set_allocated_msg_id(std::string* msg_id);

  // string body = 3;
  void clear_body();
  static const int kBodyFieldNumber = 3;
  const std::string& body() const;
  void set_body(const std::string& value);
  void set_body(std::string&& value);
  void set_body(const char* value);
  void set_body(const char* value, size_t size);
  std::string* mutable_body();
  std::string* release_body();
  void set_allocated_body(std::string* body);

  // string type = 4;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);

  // int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:proxy.ConsumeReply)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class ConsumeAckRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proxy.ConsumeAckRequest) */ {
 public:
  ConsumeAckRequest();
  virtual ~ConsumeAckRequest();

  ConsumeAckRequest(const ConsumeAckRequest& from);
  ConsumeAckRequest(ConsumeAckRequest&& from) noexcept
    : ConsumeAckRequest() {
    *this = ::std::move(from);
  }

  inline ConsumeAckRequest& operator=(const ConsumeAckRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsumeAckRequest& operator=(ConsumeAckRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsumeAckRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsumeAckRequest* internal_default_instance() {
    return reinterpret_cast<const ConsumeAckRequest*>(
               &_ConsumeAckRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ConsumeAckRequest* other);
  friend void swap(ConsumeAckRequest& a, ConsumeAckRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsumeAckRequest* New() const final {
    return CreateMaybeMessage<ConsumeAckRequest>(nullptr);
  }

  ConsumeAckRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsumeAckRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsumeAckRequest& from);
  void MergeFrom(const ConsumeAckRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsumeAckRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proxy.ConsumeAckRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proxy_2eproto);
    return ::descriptor_table_proxy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string topic = 1;
  void clear_topic();
  static const int kTopicFieldNumber = 1;
  const std::string& topic() const;
  void set_topic(const std::string& value);
  void set_topic(std::string&& value);
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  std::string* mutable_topic();
  std::string* release_topic();
  void set_allocated_topic(std::string* topic);

  // string msg_id = 2;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 2;
  const std::string& msg_id() const;
  void set_msg_id(const std::string& value);
  void set_msg_id(std::string&& value);
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  std::string* mutable_msg_id();
  std::string* release_msg_id();
  void set_allocated_msg_id(std::string* msg_id);

  // string consumer_group = 3;
  void clear_consumer_group();
  static const int kConsumerGroupFieldNumber = 3;
  const std::string& consumer_group() const;
  void set_consumer_group(const std::string& value);
  void set_consumer_group(std::string&& value);
  void set_consumer_group(const char* value);
  void set_consumer_group(const char* value, size_t size);
  std::string* mutable_consumer_group();
  std::string* release_consumer_group();
  void set_allocated_consumer_group(std::string* consumer_group);

  // @@protoc_insertion_point(class_scope:proxy.ConsumeAckRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr consumer_group_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class ConsumeAckReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proxy.ConsumeAckReply) */ {
 public:
  ConsumeAckReply();
  virtual ~ConsumeAckReply();

  ConsumeAckReply(const ConsumeAckReply& from);
  ConsumeAckReply(ConsumeAckReply&& from) noexcept
    : ConsumeAckReply() {
    *this = ::std::move(from);
  }

  inline ConsumeAckReply& operator=(const ConsumeAckReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsumeAckReply& operator=(ConsumeAckReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsumeAckReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsumeAckReply* internal_default_instance() {
    return reinterpret_cast<const ConsumeAckReply*>(
               &_ConsumeAckReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ConsumeAckReply* other);
  friend void swap(ConsumeAckReply& a, ConsumeAckReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsumeAckReply* New() const final {
    return CreateMaybeMessage<ConsumeAckReply>(nullptr);
  }

  ConsumeAckReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsumeAckReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsumeAckReply& from);
  void MergeFrom(const ConsumeAckReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsumeAckReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proxy.ConsumeAckReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proxy_2eproto);
    return ::descriptor_table_proxy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg_id = 2;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 2;
  const std::string& msg_id() const;
  void set_msg_id(const std::string& value);
  void set_msg_id(std::string&& value);
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  std::string* mutable_msg_id();
  std::string* release_msg_id();
  void set_allocated_msg_id(std::string* msg_id);

  // string consumer_group = 3;
  void clear_consumer_group();
  static const int kConsumerGroupFieldNumber = 3;
  const std::string& consumer_group() const;
  void set_consumer_group(const std::string& value);
  void set_consumer_group(std::string&& value);
  void set_consumer_group(const char* value);
  void set_consumer_group(const char* value, size_t size);
  std::string* mutable_consumer_group();
  std::string* release_consumer_group();
  void set_allocated_consumer_group(std::string* consumer_group);

  // int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:proxy.ConsumeAckReply)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr consumer_group_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProduceRequest

// string topic = 1;
inline void ProduceRequest::clear_topic() {
  topic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProduceRequest::topic() const {
  // @@protoc_insertion_point(field_get:proxy.ProduceRequest.topic)
  return topic_.GetNoArena();
}
inline void ProduceRequest::set_topic(const std::string& value) {
  
  topic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proxy.ProduceRequest.topic)
}
inline void ProduceRequest::set_topic(std::string&& value) {
  
  topic_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proxy.ProduceRequest.topic)
}
inline void ProduceRequest::set_topic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  topic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proxy.ProduceRequest.topic)
}
inline void ProduceRequest::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proxy.ProduceRequest.topic)
}
inline std::string* ProduceRequest::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:proxy.ProduceRequest.topic)
  return topic_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProduceRequest::release_topic() {
  // @@protoc_insertion_point(field_release:proxy.ProduceRequest.topic)
  
  return topic_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProduceRequest::set_allocated_topic(std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:proxy.ProduceRequest.topic)
}

// string group = 2;
inline void ProduceRequest::clear_group() {
  group_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProduceRequest::group() const {
  // @@protoc_insertion_point(field_get:proxy.ProduceRequest.group)
  return group_.GetNoArena();
}
inline void ProduceRequest::set_group(const std::string& value) {
  
  group_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proxy.ProduceRequest.group)
}
inline void ProduceRequest::set_group(std::string&& value) {
  
  group_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proxy.ProduceRequest.group)
}
inline void ProduceRequest::set_group(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proxy.ProduceRequest.group)
}
inline void ProduceRequest::set_group(const char* value, size_t size) {
  
  group_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proxy.ProduceRequest.group)
}
inline std::string* ProduceRequest::mutable_group() {
  
  // @@protoc_insertion_point(field_mutable:proxy.ProduceRequest.group)
  return group_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProduceRequest::release_group() {
  // @@protoc_insertion_point(field_release:proxy.ProduceRequest.group)
  
  return group_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProduceRequest::set_allocated_group(std::string* group) {
  if (group != nullptr) {
    
  } else {
    
  }
  group_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group);
  // @@protoc_insertion_point(field_set_allocated:proxy.ProduceRequest.group)
}

// string tag = 3;
inline void ProduceRequest::clear_tag() {
  tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProduceRequest::tag() const {
  // @@protoc_insertion_point(field_get:proxy.ProduceRequest.tag)
  return tag_.GetNoArena();
}
inline void ProduceRequest::set_tag(const std::string& value) {
  
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proxy.ProduceRequest.tag)
}
inline void ProduceRequest::set_tag(std::string&& value) {
  
  tag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proxy.ProduceRequest.tag)
}
inline void ProduceRequest::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proxy.ProduceRequest.tag)
}
inline void ProduceRequest::set_tag(const char* value, size_t size) {
  
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proxy.ProduceRequest.tag)
}
inline std::string* ProduceRequest::mutable_tag() {
  
  // @@protoc_insertion_point(field_mutable:proxy.ProduceRequest.tag)
  return tag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProduceRequest::release_tag() {
  // @@protoc_insertion_point(field_release:proxy.ProduceRequest.tag)
  
  return tag_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProduceRequest::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    
  } else {
    
  }
  tag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:proxy.ProduceRequest.tag)
}

// string body = 4;
inline void ProduceRequest::clear_body() {
  body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProduceRequest::body() const {
  // @@protoc_insertion_point(field_get:proxy.ProduceRequest.body)
  return body_.GetNoArena();
}
inline void ProduceRequest::set_body(const std::string& value) {
  
  body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proxy.ProduceRequest.body)
}
inline void ProduceRequest::set_body(std::string&& value) {
  
  body_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proxy.ProduceRequest.body)
}
inline void ProduceRequest::set_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proxy.ProduceRequest.body)
}
inline void ProduceRequest::set_body(const char* value, size_t size) {
  
  body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proxy.ProduceRequest.body)
}
inline std::string* ProduceRequest::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:proxy.ProduceRequest.body)
  return body_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProduceRequest::release_body() {
  // @@protoc_insertion_point(field_release:proxy.ProduceRequest.body)
  
  return body_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProduceRequest::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:proxy.ProduceRequest.body)
}

// int32 delayLevel = 5;
inline void ProduceRequest::clear_delaylevel() {
  delaylevel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProduceRequest::delaylevel() const {
  // @@protoc_insertion_point(field_get:proxy.ProduceRequest.delayLevel)
  return delaylevel_;
}
inline void ProduceRequest::set_delaylevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  delaylevel_ = value;
  // @@protoc_insertion_point(field_set:proxy.ProduceRequest.delayLevel)
}

// -------------------------------------------------------------------

// ProduceReply

// int32 code = 1;
inline void ProduceReply::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProduceReply::code() const {
  // @@protoc_insertion_point(field_get:proxy.ProduceReply.code)
  return code_;
}
inline void ProduceReply::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:proxy.ProduceReply.code)
}

// string msg_id = 2;
inline void ProduceReply::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProduceReply::msg_id() const {
  // @@protoc_insertion_point(field_get:proxy.ProduceReply.msg_id)
  return msg_id_.GetNoArena();
}
inline void ProduceReply::set_msg_id(const std::string& value) {
  
  msg_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proxy.ProduceReply.msg_id)
}
inline void ProduceReply::set_msg_id(std::string&& value) {
  
  msg_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proxy.ProduceReply.msg_id)
}
inline void ProduceReply::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proxy.ProduceReply.msg_id)
}
inline void ProduceReply::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proxy.ProduceReply.msg_id)
}
inline std::string* ProduceReply::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:proxy.ProduceReply.msg_id)
  return msg_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProduceReply::release_msg_id() {
  // @@protoc_insertion_point(field_release:proxy.ProduceReply.msg_id)
  
  return msg_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProduceReply::set_allocated_msg_id(std::string* msg_id) {
  if (msg_id != nullptr) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:proxy.ProduceReply.msg_id)
}

// string err_msg = 3;
inline void ProduceReply::clear_err_msg() {
  err_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProduceReply::err_msg() const {
  // @@protoc_insertion_point(field_get:proxy.ProduceReply.err_msg)
  return err_msg_.GetNoArena();
}
inline void ProduceReply::set_err_msg(const std::string& value) {
  
  err_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proxy.ProduceReply.err_msg)
}
inline void ProduceReply::set_err_msg(std::string&& value) {
  
  err_msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proxy.ProduceReply.err_msg)
}
inline void ProduceReply::set_err_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  err_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proxy.ProduceReply.err_msg)
}
inline void ProduceReply::set_err_msg(const char* value, size_t size) {
  
  err_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proxy.ProduceReply.err_msg)
}
inline std::string* ProduceReply::mutable_err_msg() {
  
  // @@protoc_insertion_point(field_mutable:proxy.ProduceReply.err_msg)
  return err_msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProduceReply::release_err_msg() {
  // @@protoc_insertion_point(field_release:proxy.ProduceReply.err_msg)
  
  return err_msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProduceReply::set_allocated_err_msg(std::string* err_msg) {
  if (err_msg != nullptr) {
    
  } else {
    
  }
  err_msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), err_msg);
  // @@protoc_insertion_point(field_set_allocated:proxy.ProduceReply.err_msg)
}

// -------------------------------------------------------------------

// ConsumeRequest

// string topic = 1;
inline void ConsumeRequest::clear_topic() {
  topic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConsumeRequest::topic() const {
  // @@protoc_insertion_point(field_get:proxy.ConsumeRequest.topic)
  return topic_.GetNoArena();
}
inline void ConsumeRequest::set_topic(const std::string& value) {
  
  topic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proxy.ConsumeRequest.topic)
}
inline void ConsumeRequest::set_topic(std::string&& value) {
  
  topic_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proxy.ConsumeRequest.topic)
}
inline void ConsumeRequest::set_topic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  topic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proxy.ConsumeRequest.topic)
}
inline void ConsumeRequest::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proxy.ConsumeRequest.topic)
}
inline std::string* ConsumeRequest::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:proxy.ConsumeRequest.topic)
  return topic_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConsumeRequest::release_topic() {
  // @@protoc_insertion_point(field_release:proxy.ConsumeRequest.topic)
  
  return topic_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConsumeRequest::set_allocated_topic(std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:proxy.ConsumeRequest.topic)
}

// string consumer_group = 2;
inline void ConsumeRequest::clear_consumer_group() {
  consumer_group_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConsumeRequest::consumer_group() const {
  // @@protoc_insertion_point(field_get:proxy.ConsumeRequest.consumer_group)
  return consumer_group_.GetNoArena();
}
inline void ConsumeRequest::set_consumer_group(const std::string& value) {
  
  consumer_group_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proxy.ConsumeRequest.consumer_group)
}
inline void ConsumeRequest::set_consumer_group(std::string&& value) {
  
  consumer_group_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proxy.ConsumeRequest.consumer_group)
}
inline void ConsumeRequest::set_consumer_group(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  consumer_group_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proxy.ConsumeRequest.consumer_group)
}
inline void ConsumeRequest::set_consumer_group(const char* value, size_t size) {
  
  consumer_group_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proxy.ConsumeRequest.consumer_group)
}
inline std::string* ConsumeRequest::mutable_consumer_group() {
  
  // @@protoc_insertion_point(field_mutable:proxy.ConsumeRequest.consumer_group)
  return consumer_group_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConsumeRequest::release_consumer_group() {
  // @@protoc_insertion_point(field_release:proxy.ConsumeRequest.consumer_group)
  
  return consumer_group_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConsumeRequest::set_allocated_consumer_group(std::string* consumer_group) {
  if (consumer_group != nullptr) {
    
  } else {
    
  }
  consumer_group_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), consumer_group);
  // @@protoc_insertion_point(field_set_allocated:proxy.ConsumeRequest.consumer_group)
}

// -------------------------------------------------------------------

// ConsumeReply

// int32 code = 1;
inline void ConsumeReply::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConsumeReply::code() const {
  // @@protoc_insertion_point(field_get:proxy.ConsumeReply.code)
  return code_;
}
inline void ConsumeReply::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:proxy.ConsumeReply.code)
}

// string msg_id = 2;
inline void ConsumeReply::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConsumeReply::msg_id() const {
  // @@protoc_insertion_point(field_get:proxy.ConsumeReply.msg_id)
  return msg_id_.GetNoArena();
}
inline void ConsumeReply::set_msg_id(const std::string& value) {
  
  msg_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proxy.ConsumeReply.msg_id)
}
inline void ConsumeReply::set_msg_id(std::string&& value) {
  
  msg_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proxy.ConsumeReply.msg_id)
}
inline void ConsumeReply::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proxy.ConsumeReply.msg_id)
}
inline void ConsumeReply::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proxy.ConsumeReply.msg_id)
}
inline std::string* ConsumeReply::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:proxy.ConsumeReply.msg_id)
  return msg_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConsumeReply::release_msg_id() {
  // @@protoc_insertion_point(field_release:proxy.ConsumeReply.msg_id)
  
  return msg_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConsumeReply::set_allocated_msg_id(std::string* msg_id) {
  if (msg_id != nullptr) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:proxy.ConsumeReply.msg_id)
}

// string body = 3;
inline void ConsumeReply::clear_body() {
  body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConsumeReply::body() const {
  // @@protoc_insertion_point(field_get:proxy.ConsumeReply.body)
  return body_.GetNoArena();
}
inline void ConsumeReply::set_body(const std::string& value) {
  
  body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proxy.ConsumeReply.body)
}
inline void ConsumeReply::set_body(std::string&& value) {
  
  body_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proxy.ConsumeReply.body)
}
inline void ConsumeReply::set_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proxy.ConsumeReply.body)
}
inline void ConsumeReply::set_body(const char* value, size_t size) {
  
  body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proxy.ConsumeReply.body)
}
inline std::string* ConsumeReply::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:proxy.ConsumeReply.body)
  return body_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConsumeReply::release_body() {
  // @@protoc_insertion_point(field_release:proxy.ConsumeReply.body)
  
  return body_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConsumeReply::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:proxy.ConsumeReply.body)
}

// string type = 4;
inline void ConsumeReply::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConsumeReply::type() const {
  // @@protoc_insertion_point(field_get:proxy.ConsumeReply.type)
  return type_.GetNoArena();
}
inline void ConsumeReply::set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proxy.ConsumeReply.type)
}
inline void ConsumeReply::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proxy.ConsumeReply.type)
}
inline void ConsumeReply::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proxy.ConsumeReply.type)
}
inline void ConsumeReply::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proxy.ConsumeReply.type)
}
inline std::string* ConsumeReply::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:proxy.ConsumeReply.type)
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConsumeReply::release_type() {
  // @@protoc_insertion_point(field_release:proxy.ConsumeReply.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConsumeReply::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:proxy.ConsumeReply.type)
}

// -------------------------------------------------------------------

// ConsumeAckRequest

// string topic = 1;
inline void ConsumeAckRequest::clear_topic() {
  topic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConsumeAckRequest::topic() const {
  // @@protoc_insertion_point(field_get:proxy.ConsumeAckRequest.topic)
  return topic_.GetNoArena();
}
inline void ConsumeAckRequest::set_topic(const std::string& value) {
  
  topic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proxy.ConsumeAckRequest.topic)
}
inline void ConsumeAckRequest::set_topic(std::string&& value) {
  
  topic_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proxy.ConsumeAckRequest.topic)
}
inline void ConsumeAckRequest::set_topic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  topic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proxy.ConsumeAckRequest.topic)
}
inline void ConsumeAckRequest::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proxy.ConsumeAckRequest.topic)
}
inline std::string* ConsumeAckRequest::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:proxy.ConsumeAckRequest.topic)
  return topic_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConsumeAckRequest::release_topic() {
  // @@protoc_insertion_point(field_release:proxy.ConsumeAckRequest.topic)
  
  return topic_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConsumeAckRequest::set_allocated_topic(std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:proxy.ConsumeAckRequest.topic)
}

// string msg_id = 2;
inline void ConsumeAckRequest::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConsumeAckRequest::msg_id() const {
  // @@protoc_insertion_point(field_get:proxy.ConsumeAckRequest.msg_id)
  return msg_id_.GetNoArena();
}
inline void ConsumeAckRequest::set_msg_id(const std::string& value) {
  
  msg_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proxy.ConsumeAckRequest.msg_id)
}
inline void ConsumeAckRequest::set_msg_id(std::string&& value) {
  
  msg_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proxy.ConsumeAckRequest.msg_id)
}
inline void ConsumeAckRequest::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proxy.ConsumeAckRequest.msg_id)
}
inline void ConsumeAckRequest::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proxy.ConsumeAckRequest.msg_id)
}
inline std::string* ConsumeAckRequest::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:proxy.ConsumeAckRequest.msg_id)
  return msg_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConsumeAckRequest::release_msg_id() {
  // @@protoc_insertion_point(field_release:proxy.ConsumeAckRequest.msg_id)
  
  return msg_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConsumeAckRequest::set_allocated_msg_id(std::string* msg_id) {
  if (msg_id != nullptr) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:proxy.ConsumeAckRequest.msg_id)
}

// string consumer_group = 3;
inline void ConsumeAckRequest::clear_consumer_group() {
  consumer_group_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConsumeAckRequest::consumer_group() const {
  // @@protoc_insertion_point(field_get:proxy.ConsumeAckRequest.consumer_group)
  return consumer_group_.GetNoArena();
}
inline void ConsumeAckRequest::set_consumer_group(const std::string& value) {
  
  consumer_group_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proxy.ConsumeAckRequest.consumer_group)
}
inline void ConsumeAckRequest::set_consumer_group(std::string&& value) {
  
  consumer_group_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proxy.ConsumeAckRequest.consumer_group)
}
inline void ConsumeAckRequest::set_consumer_group(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  consumer_group_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proxy.ConsumeAckRequest.consumer_group)
}
inline void ConsumeAckRequest::set_consumer_group(const char* value, size_t size) {
  
  consumer_group_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proxy.ConsumeAckRequest.consumer_group)
}
inline std::string* ConsumeAckRequest::mutable_consumer_group() {
  
  // @@protoc_insertion_point(field_mutable:proxy.ConsumeAckRequest.consumer_group)
  return consumer_group_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConsumeAckRequest::release_consumer_group() {
  // @@protoc_insertion_point(field_release:proxy.ConsumeAckRequest.consumer_group)
  
  return consumer_group_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConsumeAckRequest::set_allocated_consumer_group(std::string* consumer_group) {
  if (consumer_group != nullptr) {
    
  } else {
    
  }
  consumer_group_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), consumer_group);
  // @@protoc_insertion_point(field_set_allocated:proxy.ConsumeAckRequest.consumer_group)
}

// -------------------------------------------------------------------

// ConsumeAckReply

// int32 code = 1;
inline void ConsumeAckReply::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConsumeAckReply::code() const {
  // @@protoc_insertion_point(field_get:proxy.ConsumeAckReply.code)
  return code_;
}
inline void ConsumeAckReply::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:proxy.ConsumeAckReply.code)
}

// string msg_id = 2;
inline void ConsumeAckReply::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConsumeAckReply::msg_id() const {
  // @@protoc_insertion_point(field_get:proxy.ConsumeAckReply.msg_id)
  return msg_id_.GetNoArena();
}
inline void ConsumeAckReply::set_msg_id(const std::string& value) {
  
  msg_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proxy.ConsumeAckReply.msg_id)
}
inline void ConsumeAckReply::set_msg_id(std::string&& value) {
  
  msg_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proxy.ConsumeAckReply.msg_id)
}
inline void ConsumeAckReply::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proxy.ConsumeAckReply.msg_id)
}
inline void ConsumeAckReply::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proxy.ConsumeAckReply.msg_id)
}
inline std::string* ConsumeAckReply::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:proxy.ConsumeAckReply.msg_id)
  return msg_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConsumeAckReply::release_msg_id() {
  // @@protoc_insertion_point(field_release:proxy.ConsumeAckReply.msg_id)
  
  return msg_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConsumeAckReply::set_allocated_msg_id(std::string* msg_id) {
  if (msg_id != nullptr) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:proxy.ConsumeAckReply.msg_id)
}

// string consumer_group = 3;
inline void ConsumeAckReply::clear_consumer_group() {
  consumer_group_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConsumeAckReply::consumer_group() const {
  // @@protoc_insertion_point(field_get:proxy.ConsumeAckReply.consumer_group)
  return consumer_group_.GetNoArena();
}
inline void ConsumeAckReply::set_consumer_group(const std::string& value) {
  
  consumer_group_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proxy.ConsumeAckReply.consumer_group)
}
inline void ConsumeAckReply::set_consumer_group(std::string&& value) {
  
  consumer_group_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proxy.ConsumeAckReply.consumer_group)
}
inline void ConsumeAckReply::set_consumer_group(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  consumer_group_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proxy.ConsumeAckReply.consumer_group)
}
inline void ConsumeAckReply::set_consumer_group(const char* value, size_t size) {
  
  consumer_group_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proxy.ConsumeAckReply.consumer_group)
}
inline std::string* ConsumeAckReply::mutable_consumer_group() {
  
  // @@protoc_insertion_point(field_mutable:proxy.ConsumeAckReply.consumer_group)
  return consumer_group_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConsumeAckReply::release_consumer_group() {
  // @@protoc_insertion_point(field_release:proxy.ConsumeAckReply.consumer_group)
  
  return consumer_group_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConsumeAckReply::set_allocated_consumer_group(std::string* consumer_group) {
  if (consumer_group != nullptr) {
    
  } else {
    
  }
  consumer_group_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), consumer_group);
  // @@protoc_insertion_point(field_set_allocated:proxy.ConsumeAckReply.consumer_group)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proxy

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proxy_2eproto
