// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proxy.proto

#include "proxy.pb.h"
#include "proxy.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace proxy {

static const char* Proxy_method_names[] = {
  "/proxy.Proxy/Produce",
  "/proxy.Proxy/Consume",
  "/proxy.Proxy/ConsumeAck",
};

std::unique_ptr< Proxy::Stub> Proxy::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Proxy::Stub> stub(new Proxy::Stub(channel));
  return stub;
}

Proxy::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Produce_(Proxy_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Consume_(Proxy_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ConsumeAck_(Proxy_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Proxy::Stub::Produce(::grpc::ClientContext* context, const ::proxy::ProduceRequest& request, ::proxy::ProduceReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Produce_, context, request, response);
}

void Proxy::Stub::experimental_async::Produce(::grpc::ClientContext* context, const ::proxy::ProduceRequest* request, ::proxy::ProduceReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Produce_, context, request, response, std::move(f));
}

void Proxy::Stub::experimental_async::Produce(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proxy::ProduceReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Produce_, context, request, response, std::move(f));
}

void Proxy::Stub::experimental_async::Produce(::grpc::ClientContext* context, const ::proxy::ProduceRequest* request, ::proxy::ProduceReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Produce_, context, request, response, reactor);
}

void Proxy::Stub::experimental_async::Produce(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proxy::ProduceReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Produce_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proxy::ProduceReply>* Proxy::Stub::AsyncProduceRaw(::grpc::ClientContext* context, const ::proxy::ProduceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::proxy::ProduceReply>::Create(channel_.get(), cq, rpcmethod_Produce_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::proxy::ProduceReply>* Proxy::Stub::PrepareAsyncProduceRaw(::grpc::ClientContext* context, const ::proxy::ProduceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::proxy::ProduceReply>::Create(channel_.get(), cq, rpcmethod_Produce_, context, request, false);
}

::grpc::Status Proxy::Stub::Consume(::grpc::ClientContext* context, const ::proxy::ConsumeRequest& request, ::proxy::ConsumeReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Consume_, context, request, response);
}

void Proxy::Stub::experimental_async::Consume(::grpc::ClientContext* context, const ::proxy::ConsumeRequest* request, ::proxy::ConsumeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Consume_, context, request, response, std::move(f));
}

void Proxy::Stub::experimental_async::Consume(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proxy::ConsumeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Consume_, context, request, response, std::move(f));
}

void Proxy::Stub::experimental_async::Consume(::grpc::ClientContext* context, const ::proxy::ConsumeRequest* request, ::proxy::ConsumeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Consume_, context, request, response, reactor);
}

void Proxy::Stub::experimental_async::Consume(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proxy::ConsumeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Consume_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proxy::ConsumeReply>* Proxy::Stub::AsyncConsumeRaw(::grpc::ClientContext* context, const ::proxy::ConsumeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::proxy::ConsumeReply>::Create(channel_.get(), cq, rpcmethod_Consume_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::proxy::ConsumeReply>* Proxy::Stub::PrepareAsyncConsumeRaw(::grpc::ClientContext* context, const ::proxy::ConsumeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::proxy::ConsumeReply>::Create(channel_.get(), cq, rpcmethod_Consume_, context, request, false);
}

::grpc::Status Proxy::Stub::ConsumeAck(::grpc::ClientContext* context, const ::proxy::ConsumeAckRequest& request, ::proxy::ConsumeAckReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ConsumeAck_, context, request, response);
}

void Proxy::Stub::experimental_async::ConsumeAck(::grpc::ClientContext* context, const ::proxy::ConsumeAckRequest* request, ::proxy::ConsumeAckReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ConsumeAck_, context, request, response, std::move(f));
}

void Proxy::Stub::experimental_async::ConsumeAck(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proxy::ConsumeAckReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ConsumeAck_, context, request, response, std::move(f));
}

void Proxy::Stub::experimental_async::ConsumeAck(::grpc::ClientContext* context, const ::proxy::ConsumeAckRequest* request, ::proxy::ConsumeAckReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ConsumeAck_, context, request, response, reactor);
}

void Proxy::Stub::experimental_async::ConsumeAck(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proxy::ConsumeAckReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ConsumeAck_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proxy::ConsumeAckReply>* Proxy::Stub::AsyncConsumeAckRaw(::grpc::ClientContext* context, const ::proxy::ConsumeAckRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::proxy::ConsumeAckReply>::Create(channel_.get(), cq, rpcmethod_ConsumeAck_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::proxy::ConsumeAckReply>* Proxy::Stub::PrepareAsyncConsumeAckRaw(::grpc::ClientContext* context, const ::proxy::ConsumeAckRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::proxy::ConsumeAckReply>::Create(channel_.get(), cq, rpcmethod_ConsumeAck_, context, request, false);
}

Proxy::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Proxy_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Proxy::Service, ::proxy::ProduceRequest, ::proxy::ProduceReply>(
          std::mem_fn(&Proxy::Service::Produce), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Proxy_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Proxy::Service, ::proxy::ConsumeRequest, ::proxy::ConsumeReply>(
          std::mem_fn(&Proxy::Service::Consume), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Proxy_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Proxy::Service, ::proxy::ConsumeAckRequest, ::proxy::ConsumeAckReply>(
          std::mem_fn(&Proxy::Service::ConsumeAck), this)));
}

Proxy::Service::~Service() {
}

::grpc::Status Proxy::Service::Produce(::grpc::ServerContext* context, const ::proxy::ProduceRequest* request, ::proxy::ProduceReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Proxy::Service::Consume(::grpc::ServerContext* context, const ::proxy::ConsumeRequest* request, ::proxy::ConsumeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Proxy::Service::ConsumeAck(::grpc::ServerContext* context, const ::proxy::ConsumeAckRequest* request, ::proxy::ConsumeAckReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace proxy

